      SUBROUTINE UMAT(STRESS,STATEV,DDSDDE,SSE,SPD,SCD,
     1 RPL,DDSDDT,DRPLDE,DRPLDT,
     2 STRAN,DSTRAN,TIME,DTIME,TEMP,DTEMP,PREDEF,DPRED,CMNAME,
     3 NDI,NSHR,NTENS,NSTATV,PROPS,NPROPS,COORDS,DROT,PNEWDT,
     4 CELENT,DFGRD0,DFGRD1,NOEL,NPT,LAYER,KSPT,JSTEP,KINC)

      INCLUDE 'ABA_PARAM.INC'
C	  
      DIMENSION STRESS(NTENS),STATEV(NSTATV),
     1 DDSDDE(NTENS,NTENS),DDSDDT(NTENS),DRPLDE(NTENS),
     2 STRAN(NTENS),DSTRAN(NTENS),TIME(2),PREDEF(1),DPRED(1),
     3 PROPS(NPROPS),COORDS(3),DROT(3,3),DFGRD0(3,3),DFGRD1(3,3),
     4 JSTEP(4)

      PARAMETER(ZERO=0.D0, ONE=1.D0, TWO=2.D0, THREE=3.D0, FOUR=4.D0,
     1 FIVE = 5.D0, SIX = 6.D0, SEVEN = 7.D0, EIGHT = 8.D0, NINE = 9.D0,
     2 TEN = 1.D1, TOLER=1.D-9)

      REAL*8 E, NU, LAMBDA, G, EFF_STRESS, EQ_STRESS, P_OLD, P, DEL_P,
     1 BULK, R, GR, GR2, GR3, TERM2, TERM3, QQ
      DIMENSION DEV_STRESS(NTENS), DE_PLAS(NTENS), DE_ELAS(NTENS),
     1 STRESS_OLD(NTENS), DSTRESS(NTENS)

C     MATERIAL INPUT PERAMETER AND PROPERTIES
      E = PROPS(1)
      NU = PROPS(2)
      YS= PROPS(3)
      H= PROPS(4)
C     MATERIAL INPUT PERAMETER AND PROPERTIES
      
C     RECOVERING STATE VARIABLES FROM PREVIOUS TIME STEP TO CURRENT TIME STEP
      P_OLD = STATEV(1) ! EQV. PLASTIC STRAIN
C     RECOVERING STATE VARIABLES FROM PREVIOUS TIME STEP TO CURRENT TIME STEP

C     ELASTIC STIFFNESS MATRIX 
C
      G = E/(TWO*(ONE + NU))
      LAMBDA = (NU*E)/((ONE+NU)*(ONE-(TWO*NU)))

      DO J1=1, NDI
        DO J2=1, NDI
        DDSDDE(J2, J1)=LAMBDA
        END DO
      DDSDDE(J1, J1) = LAMBDA + (TWO*G)
      END DO
      DO J1=NDI+1, NTENS
      DDSDDE(J1, J1) = G
      END DO
C     ELASTIC STIFFNESS MATRIX
      
C     SAVE STRESS BEFORE BEGINNING OF TIME STEP IN STRESS_PREV
      DO J1=1,NTENS
      STRESS_OLD(J1) = STRESS(J1)
      END DO
C
C     CALCULATE TRIAL STRESS COMPONENTS ASSUMING ELASTIC BEHAVIOUR
C
      DO J1=1, NTENS
        DO J2=1, NTENS
        STRESS(J2) = STRESS(J2) + DDSDDE(J2, J1)*DSTRAN(J1)
        END DO
      END DO
C

C     CAL EQUIVALENT STRESS
      EQ_STRESS= SQRT(((STRESS(1)-STRESS(2))**2
     1+(STRESS(2)-STRESS(3))**2 + (STRESS(3)-STRESS(1))**2)/TWO 
     2+THREE*(STRESS(4)**2 + STRESS(5)**2 + STRESS(6)**2))
      
      !STATEV(1)= EQ_STRESS
C
C     CALCULATE TRIAL EFFECTIVE STRESS
      CALL EFFECTIVE_STRESS(STRESS,EFF_STRESS,NTENS)
      STATEV(3)= EFF_STRESS


      
C     DETERMINE FLOW STRESS AND YIELD FUNCTION
      FLOW_STRESS= YS + H*P_OLD
      YIELD_FUN= EFF_STRESS- FLOW_STRESS
      
      IF(YIELD_FUN.LT.ZERO) THEN
          DEL_P= ZERO
      ELSE
          DEL_P= ZERO
          CALL PLAS_MUL_LINEAR_HARD(EFF_STRESS,G,DEL_P,H,P,P_OLD,YS)
          
          FLOW_STRESS= YS + H*P
          STATEV(2)=DEL_P
          STATEV(1)= P
C     TO OBTAIN PLASTIC INCREMENT STRAIN
          CALL DEVIATORIC_STRESS(STRESS, DEV_STRESS, NTENS, NDI)
      
          DO J1=1,NDI
          DE_PLAS(J1)=THREE*DEL_P*DEV_STRESS(J1)/(TWO*EFF_STRESS)
          END DO
          DO J1=NDI+1,NTENS
          DE_PLAS(J1)=THREE*DEL_P*DEV_STRESS(J1)/EFF_STRESS
          END DO
          STATEV(4)= DE_PLAS(1)
C
C     TO OBTAIN INCREMENT IN ELASTIC STRAIN         
          DO J1=1,NTENS
          DE_ELAS(J1) = DSTRAN(J1)-DE_PLAS(J1)
          END DO
          STATEV(5)= DE_ELAS(1)
          STATEV(6)= DSTRAN(1)
C
C     TO OBTAIN INCREMENT IN STRESS COMPONENTS
C
          DO J1=1, NTENS
          DO J2=1, NTENS
          DSTRESS(J2)=DSTRESS(J2)+DDSDDE(J2, J1)*DE_ELAS(J1)
          END DO 
          END DO
C      
C     UPDATE THE STRESS COMPONENTS AND PLASTIC STRAIN COMPONENTS
          DO J1 = 1,NTENS
          STRESS(J1) = STRESS_OLD(J1) + DSTRESS(J1)
          END DO
C      
C     FORMULATE THE JACOBIAN (MATERIAL TANGENT MODULUS)  
C
          BULK = E/(THREE*(ONE-(TWO*NU)))
          R = FLOW_STRESS/EFF_STRESS
          GR = G*R
          GR2 = TWO*GR
          GR3 = THREE*GR
          TERM2=((THREE*BULK)-GR2)/THREE
          TERM3 = H/((THREE*G)+H)
          QQ = THREE*(TERM3-R)/TWO
          DO J1=1, NDI
          DO J2=1, NDI
          DDSDDE(J2, J1)=TERM2
          END DO
          DDSDDE(J1, J1)=GR2+TERM2
          END DO
          DO J1=NDI+1, NTENS
          DDSDDE(J1, J1)=GR
          END DO
          DO J1=1, NTENS
          DO J2=1, NTENS
          DDSDDE(J2, J1)=DDSDDE(J2, J1)+((TWO*G*QQ)*DEV_STRESS(J2)*
     1 DEV_STRESS(J1))/(EFF_STRESS**2)
          END DO
          END DO          
      
      END IF
      
      RETURN
      END SUBROUTINE UMAT
      
C     SUBROUTINE TO DETERMINE EFFECTIVE STRESS AND YIELD FUNCTION
      SUBROUTINE EFFECTIVE_STRESS(S,EFF_STRESS,NTENS)
      INCLUDE 'ABA_PARAM.INC'
      PARAMETER(ZERO=0.D0, ONE=1.D0,TWO=2.D0,THREE=3.D0)
      DIMENSION S(NTENS)
      REAL*8 EFF_STRESS
      ! S= state of stress given by abaqus as a variable name STRESS
      T1= ((S(1)-S(2))**2 + (S(2)-S(3))**2 + (S(3)-S(1))**2)/TWO  ! equation is writen in parts for better readability 
      T2= THREE*(S(4)**2 + S(5)**2 + S(6)**2)
      EFF_STRESS = SQRT(T1+T2)
      RETURN
      END SUBROUTINE EFFECTIVE_STRESS

C 210 subroutine to cal deviatoric stress       
      SUBROUTINE DEVIATORIC_STRESS(SIGMA, SIGMA_D, NTENS, NDI)
      INCLUDE 'ABA_PARAM.INC'
      DIMENSION SIGMA(NTENS), SIGMA_D(NTENS)
      PARAMETER(THREE=3.D0)
      REAL*8 SIGMA_MEAN
      
      SIGMA_MEAN = (SIGMA(1)+SIGMA(2)+SIGMA(3))/THREE
    
      DO I= 1,NDI
        SIGMA_D(I)= SIGMA(I)-SIGMA_MEAN
      END DO
    
      DO I= NDI+1,NTENS
        SIGMA_D(I)= SIGMA(I)
      END DO 
      RETURN 
      END SUBROUTINE DEVIATORIC_STRESS
C 210 subroutine to cal deviatoric stress

      SUBROUTINE PLAS_MUL_LINEAR_HARD(EFF_STRESS,G,DEL_P,H,P,P_OLD,YS)
      INCLUDE 'ABA_PARAM.INC'
      PARAMETER(ZERO=0.D0, THREE=3.D0, TOLER=1.D-6, N=100)
      REAL*8 EFF_STRESS,G,DEL_P,P,P_OLD,D_DEL_P
      P= P_OLD
      TERM1= EFF_STRESS-THREE*G*DEL_P-H*P-YS
      DO KINT = 1,N
          P= P+ DEL_P
          TERM1= EFF_STRESS-THREE*G*DEL_P-H*P-YS
          D_DEL_P= TERM1/((THREE*G)+H)
          DEL_P= DEL_P+D_DEL_P
          
      END DO
      RETURN
      END SUBROUTINE PLAS_MUL_LINEAR_HARD
      
          
      !.OR.ABS(TERM1).GT.(TOLER*YS)   
      